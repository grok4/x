[["u","t","man sysmerge"],["a","t","SYSMERGE(8)                OpenBSD System Manager's Manual                SYSMERGE(8)\n\nNAME\n     sysmerge \u2014 merge changes from new system files into existing configuration files\n\nSYNOPSIS\n     sysmerge [-n] [-s snapshot] [-u]\n\nDESCRIPTION\n     The sysmerge utility is used during OpenBSD system upgrades to merge changes\n     from the new base system files into the user's existing configuration files.\n     It compares the new files with the old ones, identifies differences, and\n     allows the user to resolve conflicts interactively.\n\n     sysmerge operates on files in \/etc and other directories, ensuring that\n     custom configurations are preserved while incorporating updates.\n\nOPTIONS\n     -n      Perform a dry run; do not make any changes.\n     -s snapshot\n             Specify the snapshot directory to use for the new files.\n     -u      Unattended mode; automatically merge changes without prompting.\n\nFILES\n     \/etc   Directory containing system configuration files.\n\nSEE ALSO\n     sysupgrade(8), mergemaster(8) (on other systems), cvs(1)\n\nHISTORY\n     The sysmerge command appeared in OpenBSD 4.6.\n\nOpenBSD                       June 15, 2018                       SYSMERGE(8)"],["u","t","man curl"],["a","t","CURL(1)                          BSD General Commands Manual                         CURL(1)\n\nNAME\n     curl \u2014 transfer a URL\n\nSYNOPSIS\n     curl [options] [URL...]\n\nDESCRIPTION\n     curl is a command line tool for transferring data with URL syntax, supporting\n     various protocols including HTTP, HTTPS, FTP, FTPS, SCP, SFTP, TFTP, TELNET,\n     DICT, LDAP, LDAPS, FILE, IMAP, SMTP, POP3, RTSP and RTMP. The command line\n     tool supports various options to control aspects of the operation.\n\n     curl is powered by libcurl for all transfer-related features.\n\nOPTIONS\n     -A, --user-agent <string>\n             Specify the User-Agent string to send to the HTTP server.\n\n     -b, --cookie <name=data>\n             Send cookies from a file or directly.\n\n     -c, --cookie-jar <file>\n             Write cookies to <file> after operation.\n\n     -d, --data <data>\n             Send specified data in a POST request.\n\n     -e, --referer <URL>\n             Send the referer string.\n\n     -F, --form <name=content>\n             Specify multipart POST data.\n\n     -G, --get\n             Send the -d data with a GET request (implies -d).\n\n     -H, --header <header>\n             Add a header line to the request.\n\n     -i, --include\n             Include the HTTP response headers in the output.\n\n     -k, --insecure\n             Allow connections to SSL sites without certs (unsecured).\n\n     -L, --location\n             Follow redirects.\n\n     -O, --remote-name\n             Write output to a file named as the remote file.\n\n     -s, --silent\n             Silent mode. Don't output anything except errors.\n\n     -x, --proxy <proxy>\n             Use specified proxy.\n\n     -T, --upload-file <file>\n             Transfer the specified local file to the remote URL.\n\n     --version\n             Show version number and quit.\n\n     Many more options are available; use 'curl --help' for a full list.\n\nEXIT STATUS\n     curl exits with the following values:\n     0   Success\n     1   Unsupported protocol\n     2   Failed to initialize\n     3   URL malformed\n     4   and so on, up to various error codes.\n\nFILES\n     ~\/.curlrc       Default configuration file for options.\n\nSEE ALSO\n     wget(1), ftp(1), http(1)\n\nAUTHORS\n     Daniel Stenberg and others.\n\nBUGS\n     Report bugs at https:\/\/curl.se\/docs\/bug.html\n\nOpenBSD                          July 1, 2023                          CURL(1)"]]