[["u","t","man sysmerge"],["a","t","SYSMERGE(8)                OpenBSD System Manager's Manual                SYSMERGE(8)\n\nNAME\n     sysmerge \u2014 merge changes from new system files into existing configuration files\n\nSYNOPSIS\n     sysmerge [-n] [-s snapshot] [-u]\n\nDESCRIPTION\n     The sysmerge utility is used during OpenBSD system upgrades to merge changes\n     from the new base system files into the user's existing configuration files.\n     It compares the new files with the old ones, identifies differences, and\n     allows the user to resolve conflicts interactively.\n\n     sysmerge operates on files in \/etc and other directories, ensuring that\n     custom configurations are preserved while incorporating updates.\n\nOPTIONS\n     -n      Perform a dry run; do not make any changes.\n     -s snapshot\n             Specify the snapshot directory to use for the new files.\n     -u      Unattended mode; automatically merge changes without prompting.\n\nFILES\n     \/etc   Directory containing system configuration files.\n\nSEE ALSO\n     sysupgrade(8), mergemaster(8) (on other systems), cvs(1)\n\nHISTORY\n     The sysmerge command appeared in OpenBSD 4.6.\n\nOpenBSD                       June 15, 2018                       SYSMERGE(8)"]]