[["u","t","things a loner can do to defeat social anxiety when people are in the vicinity, not necessarily trying to interact but nearby"],["a","t","1. Focus on breathing - Take slow, deep breaths to calm your nervous system. Inhale for 4 seconds, hold for 4, exhale for 4. It helps ground you when others are around.\n\n2. Use a distraction - Carry something small like a fidget toy, a coin, or even your phone to shift your attention away from the presence of people. Scroll or fiddle discreetly.\n\n3. Ground yourself in the environment - Notice physical details around you. Count objects, note colors, or focus on sounds. It pulls your mind away from overthinking social vibes.\n\n4. Wear headphones - Even if nothing\u2019s playing, they act as a barrier, signaling you\u2019re unavailable and reducing the pressure of potential interaction.\n\n5. Practice small exposures - If people are just nearby, don\u2019t force interaction, but don\u2019t hide either. Sit in a public space for a short time, like a park bench, and build tolerance gradually.\n\n6. Positive self-talk - Remind yourself that most people aren\u2019t paying attention to you. They\u2019re wrapped up in their own stuff. Repeat silently: \u201cI\u2019m fine, they don\u2019t care.\u201d\n\n7. Have an exit plan - Know you can leave if it gets too much. Just having that mental escape route can ease the tension of being near others."]]