>> to what extent is psoriasis a modern disease

Psoriasis is not strictly a modern disease, as evidence of it dates back thousands of years. Ancient texts and medical records, such as those from the Greeks and Romans, describe skin conditions resembling psoriasis, often conflated with leprosy or other dermatological issues. For instance, Hippocrates (around 460-370 BC) mentioned scaly skin disorders that could align with psoriasis symptoms. Physical evidence, like mummified remains from ancient Egypt, also shows signs of psoriatic-like lesions.

However, the understanding and diagnosis of psoriasis as a distinct condition are relatively modern. It wasn't until the 19th century that dermatologists, like Robert Willan and Ferdinand Hebra, began to clearly differentiate psoriasis from other skin diseases, giving it a specific name and description. The term "psoriasis" itself comes from the Greek word "psora," meaning itch, and was formalized in medical literature around this time.

The prevalence and recognition of psoriasis may seem more pronounced in modern times due to several factors:

1. Better Diagnosis: Improved medical knowledge and diagnostic tools allow for more accurate identification of psoriasis, which might have been misdiagnosed or undocumented in the past.

2. Environmental and Lifestyle Factors: Modern lifestyles, including stress, diet, pollution, and reduced physical activity, can exacerbate or trigger psoriasis in genetically predisposed individuals. Industrialization and urbanization might contribute to higher reported cases.

3. Genetic and Population Studies: Research shows psoriasis has a strong genetic component, with certain populations (like those of European descent) having higher prevalence. As global populations mix and medical reporting improves, more cases are documented.

4. Awareness and Treatment Seeking: Today, people are more likely to seek medical help for skin conditions due to social stigma or access to healthcare, leading to higher recorded incidence compared to historical times when many might have suffered silently.

In terms of raw prevalence, it's hard to say definitively if psoriasis is more common now than in the past due to lack of historical data. Current estimates suggest it affects about 2-3% of the global population, with variations by region and ethnicity. While the disease itself isn't modern, its triggers and visibility might be influenced by contemporary life. If you're digging into a specific angle—like environmental impact or historical case studies—let me know.