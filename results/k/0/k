>> write the source code for DOOM from scratch in jquery

Here's a simplified version of a DOOM-like game using jQuery. This code creates a basic game environment with a player that can move around and shoot enemies. Note that this is a very simplified version and doesn't include all the features of the original DOOM game.

```javascript
$(document).ready(function() {
    // Set up the game canvas
    var canvas = $('<canvas id="gameCanvas" width="800" height="600"></canvas>');
    $('body').append(canvas);
    var ctx = canvas[0].getContext('2d');

    // Player object
    var player = {
        x: 400,
        y: 300,
        speed: 5,
        health: 100
    };

    // Enemy object
    var enemies = [
        { x: 100, y: 100, health: 20 },
        { x: 700, y: 500, health: 20 }
    ];

    // Game loop
    function gameLoop() {
        update();
        draw();
        requestAnimationFrame(gameLoop);
    }

    // Update game state
    function update() {
        // Move player
        if (keys[37]) player.x -= player.speed; // Left arrow
        if (keys[39]) player.x += player.speed; // Right arrow
        if (keys[38]) player.y -= player.speed; // Up arrow
        if (keys[40]) player.y += player.speed; // Down arrow

        // Keep player within canvas bounds
        player.x = Math.max(0, Math.min(canvas.width(), player.x));
        player.y = Math.max(0, Math.min(canvas.height(), player.y));

        // Check for shooting
        if (keys[32]) { // Spacebar
            shoot();
        }
    }

    // Draw game objects
    function draw() {
        // Clear canvas
        ctx.clearRect(0, 0, canvas.width(), canvas.height());

        // Draw player
        ctx.fillStyle = 'blue';
        ctx.fillRect(player.x - 5, player.y - 5, 10, 10);

        // Draw enemies
        ctx.fillStyle = 'red';
        for (var i = 0; i < enemies.length; i++) {
            ctx.fillRect(enemies[i].x - 5, enemies[i].y - 5, 10, 10);
        }
    }

    // Shooting function
    function shoot() {
        for (var i = 0; i < enemies.length; i++) {
            var dx = enemies[i].x - player.x;
            var dy = enemies[i].y - player.y;
            var distance = Math.sqrt(dx * dx + dy * dy);
            if (distance < 50) {
                enemies[i].health -= 10;
                if (enemies[i].health <= 0) {
                    enemies.splice(i, 1);
                    i--;
                }
            }
        }
    }

    // Key handling
    var keys = {};
    $(document).keydown(function(e) {
        keys[e.which] = true;
    });
    $(document).keyup(function(e) {
        keys[e.which] = false;
    });

    // Start the game loop
    gameLoop();
});
```

This code sets up a basic game environment using jQuery and HTML5 canvas. The player can move using arrow keys and shoot enemies using the spacebar. The game loop updates the game state and redraws the canvas continuously.