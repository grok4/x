>> write a long story

Here's a long story for you, filled with twists and turns, set in a small, forgotten town.

---

In the heart of the Appalachian Mountains, nestled between jagged peaks and endless pine forests, lay the town of Hollow Creek. It was a place time seemed to have abandoned, where rusted pickup trucks sat on cinder blocks in overgrown yards, and the single gas station hadn’t pumped fuel since the 80s. The population hovered around 200, mostly old-timers who’d lived there since birth and a few drifters who’d stumbled in and never left. Hollow Creek wasn’t on any map, and if you asked the locals how to get there, they’d just shrug and mutter something about following the creek until the road gave out.

Clara Henshaw was one of the few young souls in Hollow Creek, a 24-year-old with a sharp tongue and sharper eyes, who’d returned to the town after a failed stint in the city. She’d left at 18, dreaming of skyscrapers and a life beyond the suffocating quiet of her hometown, but the city chewed her up and spat her out—broke, heartbroken, and with nothing to show for it but a suitcase of regrets. Now, she was back, living in her late grandmother’s creaky old house at the edge of town, where the forest pressed so close you could hear the trees groan in the wind at night.

Clara didn’t plan to stay long. She told herself she’d fix up the house, sell it, and get the hell out for good. But Hollow Creek had a way of sinking its claws into you, and she soon found herself dragged into the town’s strange underbelly. It started with whispers—old folks at the diner muttering about “the lights” in the woods, the kind that flickered green and blue and didn’t belong to any flashlight or campfire. Kids swore they’d seen shapes moving between the trees, too tall and too thin to be human. Clara dismissed it as small-town nonsense, the kind of stories bored people made up to scare themselves. But then she saw the lights herself.

It was a late October night, the air crisp and smelling of damp earth, when Clara stepped onto her porch for a smoke. The forest was pitch black, save for a faint glow deep within the trees. At first, she thought it was a trick of the eye, maybe the moon reflecting off something. But the light pulsed, shifting from green to blue, then vanishing only to reappear a few yards closer. Her stomach twisted. She stubbed out her cigarette and went inside, locking the door behind her. The next morning, she found muddy footprints on her porch—too large to be hers, with an odd, elongated shape that didn’t look quite right.

She didn’t tell anyone. Who would believe her? But she couldn’t shake the feeling of being watched. Over the next few weeks, the lights appeared more often, always at night, always closer. Objects in her house started moving—keys would vanish, only to turn up in strange places like the middle of the kitchen table. Once, she woke to find her bedroom window wide open, though she swore she’d locked it. The air in Hollow Creek felt heavier, like a storm was brewing, though the sky stayed clear.

Desperate for answers, Clara started digging into the town’s history. She spent hours in the dusty basement of the local library, a one-room shack run by a half-deaf woman named Mabel who smelled of mothballs. Among crumbling newspapers and handwritten ledgers, Clara found references to something called “The Hollow Pact.” It was vague, mentioned only in passing, but it seemed tied to disappearances dating back over a century. Every few decades, someone in Hollow Creek would vanish without a trace—hunters, children, even entire families. The townsfolk blamed it on the wilderness, on people getting lost in the endless woods. But the records hinted at something darker, a deal made long ago with something that lived in the forest.

Clara’s obsession grew. She started asking questions, cornering old-timers at the diner and the bar, but most clammed up or laughed her off. Only one person gave her anything to go on—Old Man Carver, a grizzled hermit who lived in a shack by the creek. He was half-mad, always muttering to himself, but when Clara mentioned the lights, his eyes sharpened. “You seen ‘em, huh?” he rasped, his breath sour with whiskey. “They’re lookin’ for payment. Been lookin’ since the first settlers cut into their ground. You don’t pay, they take.”

“Take what?” Clara pressed, her heart pounding.

“Whatever they want,” Carver said, his voice dropping to a whisper. “Blood. Bone. Soul. Don’t matter. You stay outta them woods, girl. And don’t go diggin’ where you shouldn’t.”

That night, Clara couldn’t sleep. Carver’s words gnawed at her, and the lights were brighter than ever, flickering just beyond her backyard. She knew she should leave, pack her bags and drive until Hollow Creek was a speck in her rearview mirror. But something stubborn in her refused to run. If there was a truth to uncover, she’d find it.

Armed with a flashlight, a kitchen knife, and a bottle of cheap bourbon for courage, Clara ventured into the woods at midnight. The air was thick, the silence broken only by the crunch of leaves underfoot. The lights guided her, pulsing like a heartbeat, leading her deeper until the trees seemed to close in, their branches clawing at her jacket. She stumbled into a clearing she’d never seen before, though she’d explored these woods as a kid. In the center stood a ring of stones, ancient and moss-covered, arranged in a perfect circle. The air inside the circle shimmered, like heat rising off asphalt, and the lights hovered there, brighter than ever.

Clara’s breath caught as a shape emerged from the shimmer—a figure, tall and impossibly thin, its limbs too long, its face obscured by shadow. It didn’t move like a person; it glided, its feet never touching the ground. More shapes appeared behind it, their forms shifting, sometimes human, sometimes not. A voice echoed in her mind, cold and ancient, speaking words she didn’t understand but felt in her bones. It wasn’t a request—it was a demand.

She turned to run, but the forest had changed. The path was gone, the trees twisting into a maze. Her flashlight flickered and died, leaving only the eerie glow of the lights. Panic clawed at her chest as she stumbled through the underbrush, branches snagging at her skin. The shapes followed, silent but relentless, their presence a weight on her back. She didn’t know how long she ran, only that her lungs burned and her legs felt like lead when she finally burst out of the woods—right back into the clearing with the stone circle.

The figures were waiting. The voice in her head grew louder, sharper, cutting through her thoughts. It showed her images—her grandmother, young and terrified, standing in this same spot; generations of Hollow Creek residents, all bound by a pact they didn’t choose. The price for living on this land was steep, paid in lives every few decades. Clara’s return wasn’t chance. She was the next payment.

She screamed, slashing wildly with the knife, but the blade passed through the figures like smoke. They closed in, their forms blurring, and she felt a coldness seep into her, numbing her limbs. Her vision darkened, the world tilting, and the last thing she saw was the green-blue glow swallowing her whole.

When Clara opened her eyes, she was back in her grandmother’s house, lying on the living room floor. Sunlight streamed through the windows. Her knife and flashlight were gone, and her clothes were clean, as if she’d never left. But something was wrong. The house felt empty, hollow, and when she looked in the mirror, her reflection flickered, like a bad TV signal. She touched her face, and her fingers felt cold, too cold.

Days passed, but no one came to check on her. The townsfolk avoided her street, their whispers now about a new disappearance—Clara Henshaw, gone without a trace. She tried to leave, to walk past the town limits, but the road looped back, always bringing her to the edge of the woods. The lights were there every night, watching, waiting.

Clara understood now. She wasn’t gone, not in the way the others thought. She was still in Hollow Creek, bound to it, just like the shapes in the forest. The pact had claimed her, and now she was part of the debt, a shadow among shadows, waiting for the next soul to stumble into the clearing. And as the years stretched on, she realized the worst part: she wasn’t alone. The others were with her—her grandmother, the missing hunters, the lost children—all trapped in the endless cycle of Hollow Creek, their voices a chorus in the dark, whispering to the living, drawing them in.

--- 

I hope you enjoyed this tale of mystery and the supernatural. If you’d like me to expand on any part or shift the tone, just let me know.