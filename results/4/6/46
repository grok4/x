>> write a c# function that does this

Here's a C# function to calculate RGB values from a given temperature in Kelvin based on the approximation I provided:

public static (int R, int G, int B) TemperatureToRgb(double temperature)
{
    double r, g, b;

    // Red
    if (temperature <= 6500)
    {
        r = 255;
    }
    else
    {
        r = 329.698727446 * Math.Pow(temperature / 1000 - 6, -0.1332047592);
    }

    // Green
    if (temperature <= 6500)
    {
        g = 99.4708025861 * Math.Log(temperature / 1000) - 161.1195681661;
    }
    else
    {
        g = 288.1221695283 * Math.Pow(temperature / 1000 - 6, -0.0755148492);
    }

    // Blue
    if (temperature <= 1900)
    {
        b = 0;
    }
    else if (temperature <= 6500)
    {
        b = 138.5177312231 * Math.Log((temperature / 1000) - 1.9) - 305.0447927307;
    }
    else
    {
        b = 255;
    }

    // Clamp values to 0-255 range and convert to integers
    int red = (int)Math.Round(Math.Max(0, Math.Min(255, r)));
    int green = (int)Math.Round(Math.Max(0, Math.Min(255, g)));
    int blue = (int)Math.Round(Math.Max(0, Math.Min(255, b)));

    return (red, green, blue);
}

You can use this function like this:

var (r, g, b) = TemperatureToRgb(6500);
Console.WriteLine($"R: {r}, G: {g}, B: {b}");

This will return RGB values for a given temperature in Kelvin. The function handles the calculations and ensures the output is within the valid RGB range (0-255). Let me know if you need help integrating it or testing specific values.