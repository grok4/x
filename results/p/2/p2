[["u","t","what are the lyrics to the song \"Devil Boy\" by the band Seven Mary Three?"],["a","t","Here are the lyrics to \"Devil Boy\" by Seven Mary Three, from their album *Orange Ave.* released in 1998. I've kept them as accurate as I can based on the original recording.\n\nI slept through Easter yesterday\nRight through Christmas just the same\nThe priest came up to me all up in arms\nHe said, Devil boy what have you done?\n\nThe Jesuits roll in their tanks to my front door\nWhile the Capuchins hold a love-in on my front porch\nThe Augustinians and Franciscans want to do me in\nI said, Hey now fathers, where you been?\n\nI'm just a devil boy\nLooking for some fun\nI'm just a devil boy\nI wanna be your son\n\nI got scars on my back from the way I been raised\nI got a stone in my shoe from walking these days\nI got a fire in my belly and it just won't quit\nI got a hole in my soul and I can't fill it\n\nI'm just a devil boy\nLooking for some fun\nI'm just a devil boy\nI wanna be your son\n\nI got a girl on my mind and she won't let go\nI got a thing for her sister but she'll never know\nI got a taste for the wine and a head for beer\nI got a thing for the road and I'm outta here\n\nI'm just a devil boy\nLooking for some fun\nI'm just a devil boy\nI wanna be your son\n\nThese are the lyrics as I recall them. If you need a deeper analysis or specific lines explained, just ask."]]